Three processes, the selector, the player and the queuer.
One semaphore for queueing.
One "need queue" semaphore

The selector
    initializes the queueing semaphore to 0
    initializes "need queue" to 0
    invokes the queuer
    invokes the player
    "play" action:
        sends a CONT to the player
        whatever top song in queue, tell player to play it
    "done playing" action:
        happens whenever player reports done playing
        adjusts last-played and number of plays
        calls the "next" action
    "error" action:
        happens whenever player reports error playing
        reports the error
        calls the "next" action
    "next" action:
        posts to "need queue" 
        waits on the queuing semaphore
        pops a song off the queue, 
             (selecting the next in the queue as the song to be played.)
        calls the "play" action
    calls the "play" action
    main loop

The player
    exists to isolate gstreamer from postgresql stuff
    repeatedly
        reads a filename from stdin
            plays it
            writes done (or error) to stdout
        if filename comes from stdin, interrupt currently playing song.

When the queuer starts, 
     posts the queuing semaphore up to num. queued in the database
     then repeatedly
          fills the queue with highest rated songs until full,
              each time the queue is increased, it posts the queuing semaphore
          once full, the queuer waits on "need queue"

When next is invoked, it 
     down-rates the song
     tells the selector to do the "next" action
     exits

When pause is invoked, it
     sends a STOP to the player
