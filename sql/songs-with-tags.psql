CREATE OR REPLACE FUNCTION quoteID(_id bigint) RETURNS name AS $FOOP$
BEGIN
	RETURN replace(_id::text,'-','_');
END
$FOOP$ language 'plpgsql';	


CREATE OR REPLACE FUNCTION objectsOf(_type integer, _subject bigint) RETURNS VOID AS $FOOP$
BEGIN
	EXECUTE 'CREATE TEMPORARY VIEW objectsOf_' || _type::text || '_for_' || quoteID(_subject) || $$ AS
		SELECT oid AS id FROM tags INNER JOIN capabilities ON tags.sid = capabilities.id
			WHERE tags.sid = $$ || _subject || $$ AND capabilities.which = $$ || _type || $$;
	$$;
END;
$FOOP$ language 'plpgsql';

CREATE OR REPLACE FUNCTION songsForWord(_word text) RETURNS VOID AS $FOOP$
DECLARE
_wordID bigint;
_words integer;
_songs integer;
BEGIN
	SELECT id INTO _words FROM tables WHERE name = 'words';
	SELECT id INTO _songs FROM tables WHERE name = 'songs';
	SELECT id INTO _wordID FROM capabilities WHERE type = _words AND which = 
	       (SELECT id FROM words WHERE word = _word);
       PERFORM objectsOf(_songs, _wordID);
       EXECUTE 'CREATE TEMPORARY VIEW songsForWord_' || quote_ident(_word) || ' AS
       SELECT title,composer FROM songs WHERE songs.id IN 
       	      (SELECT which FROM capabilities WHERE id IN
	      	      (SELECT id FROM objectsOf_' || _songs::text || '_for_' || quoteID(_wordId) || '))';
END
$FOOP$ language 'plpgsql';